"use client"

import { useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { ExploitTable } from "@/components/exploit-table"
import { ExploitTimeline } from "@/components/exploit-timeline"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { useExploits } from "@/hooks/use-exploits"
import { LoadingSpinner } from "@/components/loading-spinner"

export default function ExploitsPage() {
  const [searchQuery, setSearchQuery] = useState("")
  const [typeFilter, setTypeFilter] = useState("all")
  const { exploits, loading, error } = useExploits()

  const filteredExploits = exploits.filter((exploit) => {
    const matchesSearch = exploit.protocol.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesType = typeFilter === "all" || exploit.type === typeFilter
    return matchesSearch && matchesType
  })

  return (
    <div className="container py-8 px-4 md:px-6">
      <h1 className="text-3xl font-bold mb-6">Exploits</h1>

      <Card className="mb-8">
        <CardContent className="pt-6">
          <div className="grid gap-4 md:grid-cols-3">
            <div className="md:col-span-2">
              <Input
                placeholder="Search by protocol name..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full"
              />
            </div>
            <div>
              <Select value={typeFilter} onValueChange={setTypeFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="Filter by type" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Types</SelectItem>
                  <SelectItem value="Reentrancy">Reentrancy</SelectItem>
                  <SelectItem value="Flash Loan Attack">Flash Loan Attack</SelectItem>
                  <SelectItem value="Oracle Manipulation">Oracle Manipulation</SelectItem>
                  <SelectItem value="Access Control">Access Control</SelectItem>
                  <SelectItem value="Logic Error">Logic Error</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      <Tabs defaultValue="table" className="w-full">
        <TabsList className="mb-4">
          <TabsTrigger value="table">Table View</TabsTrigger>
          <TabsTrigger value="timeline">Timeline View</TabsTrigger>
        </TabsList>
        <TabsContent value="table">
          {loading ? (
            <div className="flex justify-center py-12">
              <LoadingSpinner />
            </div>
          ) : error ? (
            <div className="text-center py-12 text-destructive">Error loading exploits data. Please try again.</div>
          ) : (
            <ExploitTable exploits={filteredExploits} />
          )}
        </TabsContent>
        <TabsContent value="timeline">
          {loading ? (
            <div className="flex justify-center py-12">
              <LoadingSpinner />
            </div>
          ) : error ? (
            <div className="text-center py-12 text-destructive">Error loading exploits data. Please try again.</div>
          ) : (
            <ExploitTimeline exploits={filteredExploits} />
          )}
        </TabsContent>
      </Tabs>
    </div>
  )
}

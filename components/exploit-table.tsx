"use client";

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useState } from "react";
import { ExploitDetailModal } from "@/components/exploit-detail-modal";
import { Exploit } from "@/types/exploit";

interface ExploitTableProps {
  exploits: Exploit[];
}

export function ExploitTable({ exploits }: ExploitTableProps) {
  const [selectedExploit, setSelectedExploit] = useState<Exploit | null>(null);

  const handleViewDetails = (exploit: Exploit) => {
    setSelectedExploit(exploit);
  };

  const handleCloseModal = () => {
    setSelectedExploit(null);
  };

  const formatFundsLost = (lamports: string) => {
    const sol = Number(lamports) / 1e9;
    return `${sol.toFixed(2)} SOL`;
  };

  return (
    <>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Date</TableHead>
              <TableHead>Protocol</TableHead>
              <TableHead>Type</TableHead>
              <TableHead>Funds Lost</TableHead>
              <TableHead>Status</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {exploits.length === 0 ? (
              <TableRow>
                <TableCell colSpan={6} className="h-24 text-center">
                  No exploits found.
                </TableCell>
              </TableRow>
            ) : (
              exploits.map((exploit) => (
                <TableRow key={exploit.id}>
                  <TableCell>{new Date(exploit.date).toLocaleDateString()}</TableCell>
                  <TableCell className="font-medium">{exploit.protocol}</TableCell>
                  <TableCell>{exploit.type}</TableCell>
                  <TableCell>{formatFundsLost(exploit.fundsLost)}</TableCell>
                  <TableCell>
                    <Badge variant={exploit.status === "Confirmed" ? "destructive" : "outline"}>
                      {exploit.status}
                    </Badge>
                  </TableCell>
                  <TableCell className="text-right">
                    <Button variant="outline" size="sm" onClick={() => handleViewDetails(exploit)}>
                      View Details
                    </Button>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {selectedExploit && (
        <ExploitDetailModal
          exploit={selectedExploit}
          isOpen={!!selectedExploit}
          onClose={handleCloseModal}
        />
      )}
    </>
  );
}
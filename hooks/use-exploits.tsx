"use client";

import { useState, useCallback } from "react";
import axios from "axios";
import { Exploit } from "@/types/exploit";

interface UseExploitsReturn {
  exploits: Exploit[];
  total: number;
  loading: boolean;
  error: Error | null;
  fetchExploits: (params?: { page?: number; limit?: number; protocol?: string; type?: string }) => Promise<void>;
}

export function useExploits(): UseExploitsReturn {
  const [exploits, setExploits] = useState<Exploit[]>([]);
  const [total, setTotal] = useState<number>(0);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<Error | null>(null);

  const fetchExploits = useCallback(
    async ({ page = 1, limit = 10, protocol, type }: { page?: number; limit?: number; protocol?: string; type?: string } = {}) => {
      try {
        setLoading(true);
        setError(null);

        const query: Record<string, string> = { page: String(page), limit: String(limit) };
        if (protocol) query.protocol = protocol;
        if (type && type !== "all") query.type = type;

        console.log("Fetching exploits with query:", query);

        // Fetch as array of Exploit
        const response = await axios.get<Exploit[]>("http://localhost:4000/exploits", {
          params: query,
        });

        console.log("API response:", response.data);

        const exploitsData = (Array.isArray(response.data) ? response.data : []).map((item) => ({
          ...item,
          fundsLost: item.fundsLost.toString(), // Convert BigInt to string
          date: new Date(item.date).toISOString(), // Ensure ISO string
          createdAt: new Date(item.createdAt).toISOString(), // Ensure ISO string
        }));

        setExploits(exploitsData);
        setTotal(exploitsData.length); // Infer total from array length
        setLoading(false);

        console.log("Set exploits:", exploitsData);
      } catch (err) {
        const error = err instanceof Error ? err : new Error("Failed to fetch exploits");
        console.error("Fetch error:", error);
        setError(error);
        setExploits([]);
        setTotal(0);
        setLoading(false);
      }
    },
    []
  );

  return { exploits, total, loading, error, fetchExploits };
}
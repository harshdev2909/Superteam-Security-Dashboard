"use client"

import { useState, useEffect } from "react"
import type { Exploit } from "@/types/exploit"
import axios from "axios"
// Mock data for the exploits


export function useExploits() {
  const [exploits, setExploits] = useState<Exploit[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<Error | null>(null)

  useEffect(() => {
    const fetchExploits = async () => {
      try {
        setLoading(true)
        // In a real app, this would be an API call
        const response = await axios.get('http://localhost:4000/exploits')
        setExploits(response.data)

        // Using mock data for now
        // Simulate API delay
        await new Promise((resolve) => setTimeout(resolve, 1000))
        // setExploits(mockExploits)
        setLoading(false)
      } catch (err) {
        setError(err instanceof Error ? err : new Error("Failed to fetch exploits"))
        setLoading(false)
      }
    }

    fetchExploits()
  }, [])

  return { exploits, loading, error }
}
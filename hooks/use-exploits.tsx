"use client";

import { useState, useCallback, useEffect } from "react";
import axios from "axios";
import { Exploit } from "@/types/exploit";

interface ExploitResponse {
  data: Exploit[];
  total: number;
}

interface UseExploitsReturn {
  exploits: Exploit[];
  total: number;
  loading: boolean;
  error: Error | null;
  fetchExploits: (params?: { page?: number; limit?: number; protocol?: string; type?: string }) => Promise<void>;
}

export function useExploits(): UseExploitsReturn {
  const [exploits, setExploits] = useState<Exploit[]>([]);
  const [total, setTotal] = useState<number>(0);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<Error | null>(null);

  const fetchExploits = useCallback(
    async ({ page = 1, limit = 10, protocol, type }: { page?: number; limit?: number; protocol?: string; type?: string } = {}) => {
      try {
        setLoading(true);
        setError(null);

        const query: Record<string, string> = { page: String(page), limit: String(limit) };
        if (protocol) query.protocol = protocol;
        if (type && type !== "all") query.type = type;

        console.log("Fetching exploits with query:", query);

        const response = await axios.get("http://localhost:4000/exploits", {
          params: query,
        });

        console.log("Raw API response:", response.data);

        let exploitsData: Exploit[] = [];
        let totalCount: number = 0;

        if (Array.isArray(response.data)) {
          // Handle flat array response
          exploitsData = response.data.map((item) => ({
            ...item,
            fundsLost: item.fundsLost.toString(),
            date: new Date(item.date).toISOString(),
            createdAt: new Date(item.createdAt).toISOString(),
          }));
          totalCount = response.data.length;
        } else if (response.data && Array.isArray(response.data.data)) {
          // Handle { data: Exploit[], total: number } response
          exploitsData = response.data.data.map((item) => ({
            ...item,
            fundsLost: item.fundsLost.toString(),
            date: new Date(item.date).toISOString(),
            createdAt: new Date(item.createdAt).toISOString(),
          }));
          totalCount = response.data.total || exploitsData.length;
        } else {
          throw new Error("Unexpected response format");
        }

        setExploits(exploitsData);
        setTotal(totalCount);
        setLoading(false);

        console.log("Set exploits:", exploitsData, "Total:", totalCount);
      } catch (err) {
        const error = err instanceof Error ? err : new Error("Failed to fetch exploits");
        console.error("Fetch error:", error);
        setError(error);
        setExploits([]);
        setTotal(0);
        setLoading(false);
      }
    },
    []
  );

  useEffect(() => {
    fetchExploits();
  }, [fetchExploits]);

  return { exploits, total, loading, error, fetchExploits };
}